        -:    0:Source:C:/Users/theql/AppData/Local/JetBrains/Toolbox/apps/CLion/ch-0/232.9921.42/bin/mingw/lib/gcc/x86_64-w64-mingw32/13.1.0/include/c++/bits/new_allocator.h
        -:    0:Graph:D:\programming\projects\cpp-labs\lab1\cmake-build-debug-coverage\_deps\googletest-build\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:D:\programming\projects\cpp-labs\lab1\cmake-build-debug-coverage\_deps\googletest-build\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2023 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/new_allocator.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{memory}
        -:   28: */
        -:   29:
        -:   30:#ifndef _STD_NEW_ALLOCATOR_H
        -:   31:#define _STD_NEW_ALLOCATOR_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#include <new>
        -:   35:#include <bits/functexcept.h>
        -:   36:#include <bits/move.h>
        -:   37:#if __cplusplus >= 201103L
        -:   38:#include <type_traits>
        -:   39:#endif
        -:   40:
        -:   41:namespace std _GLIBCXX_VISIBILITY(default)
        -:   42:{
        -:   43:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   44:
        -:   45:  /**
        -:   46:   * @brief  An allocator that uses global `new`, as per C++03 [20.4.1].
        -:   47:   * @ingroup allocators
        -:   48:   *
        -:   49:   * This is precisely the allocator defined in the C++ Standard.
        -:   50:   *   - all allocation calls `operator new`
        -:   51:   *   - all deallocation calls `operator delete`
        -:   52:   *
        -:   53:   * This is the default base-class implementation of `std::allocator`,
        -:   54:   * and is also the base-class of the `__gnu_cxx::new_allocator` extension.
        -:   55:   * You should use either `std::allocator` or `__gnu_cxx::new_allocator`
        -:   56:   * instead of using this directly.
        -:   57:   *
        -:   58:   * @tparam  _Tp  Type of allocated object.
        -:   59:   *
        -:   60:   * @headerfile memory
        -:   61:   */
        -:   62:  template<typename _Tp>
        -:   63:    class __new_allocator
        -:   64:    {
        -:   65:    public:
        -:   66:      typedef _Tp        value_type;
        -:   67:      typedef std::size_t     size_type;
        -:   68:      typedef std::ptrdiff_t  difference_type;
        -:   69:#if __cplusplus <= 201703L
        -:   70:      typedef _Tp*       pointer;
        -:   71:      typedef const _Tp* const_pointer;
        -:   72:      typedef _Tp&       reference;
        -:   73:      typedef const _Tp& const_reference;
        -:   74:
        -:   75:      template<typename _Tp1>
        -:   76:	struct rebind
        -:   77:	{ typedef __new_allocator<_Tp1> other; };
        -:   78:#endif
        -:   79:
        -:   80:#if __cplusplus >= 201103L
        -:   81:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   82:      // 2103. propagate_on_container_move_assignment
        -:   83:      typedef std::true_type propagate_on_container_move_assignment;
        -:   84:#endif
        -:   85:
        -:   86:      __attribute__((__always_inline__))
        -:   87:      _GLIBCXX20_CONSTEXPR
     315*:   88:      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
        1:   88-block  0
    %%%%%:   88-block  1
    %%%%%:   88-block  2
        1:   88-block  3
        1:   88-block  4
        1:   88-block  5
        1:   88-block  6
       16:   88-block  7
       15:   88-block  8
    %%%%%:   88-block  9
    %%%%%:   88-block 10
       31:   88-block 11
    %%%%%:   88-block 12
    %%%%%:   88-block 13
    %%%%%:   88-block 14
    %%%%%:   88-block 15
       19:   88-block 16
        1:   88-block 17
        1:   88-block 18
    %%%%%:   88-block 19
        1:   88-block 20
       58:   88-block 21
        1:   88-block 22
       31:   88-block 23
    %%%%%:   88-block 24
    %%%%%:   88-block 25
    %%%%%:   88-block 26
    %%%%%:   88-block 27
        4:   88-block 28
    %%%%%:   88-block 29
        1:   88-block 30
    %%%%%:   88-block 31
       15:   88-block 32
       15:   88-block 33
        1:   88-block 34
        1:   88-block 35
    %%%%%:   88-block 36
    %%%%%:   88-block 37
    %%%%%:   88-block 38
    %%%%%:   88-block 39
    %%%%%:   88-block 40
    %%%%%:   88-block 41
    %%%%%:   88-block 42
    %%%%%:   88-block 43
    %%%%%:   88-block 44
    %%%%%:   88-block 45
    %%%%%:   88-block 46
    %%%%%:   88-block 47
    %%%%%:   88-block 48
    %%%%%:   88-block 49
    %%%%%:   88-block 50
    %%%%%:   88-block 51
    %%%%%:   88-block 52
    %%%%%:   88-block 53
    %%%%%:   88-block 54
    %%%%%:   88-block 55
    %%%%%:   88-block 56
    %%%%%:   88-block 57
    %%%%%:   88-block 58
    %%%%%:   88-block 59
    %%%%%:   88-block 60
    %%%%%:   88-block 61
    %%%%%:   88-block 62
    %%%%%:   88-block 63
    %%%%%:   88-block 64
    %%%%%:   88-block 65
    %%%%%:   88-block 66
    %%%%%:   88-block 67
    %%%%%:   88-block 68
    %%%%%:   88-block 69
    %%%%%:   88-block 70
    %%%%%:   88-block 71
    %%%%%:   88-block 72
    %%%%%:   88-block 73
    %%%%%:   88-block 74
    %%%%%:   88-block 75
    %%%%%:   88-block 76
    %%%%%:   88-block 77
    %%%%%:   88-block 78
    %%%%%:   88-block 79
    %%%%%:   88-block 80
    %%%%%:   88-block 81
    %%%%%:   88-block 82
    %%%%%:   88-block 83
    %%%%%:   88-block 84
    %%%%%:   88-block 85
    %%%%%:   88-block 86
    %%%%%:   88-block 87
    %%%%%:   88-block 88
    %%%%%:   88-block 89
    %%%%%:   88-block 90
    %%%%%:   88-block 91
    %%%%%:   88-block 92
    %%%%%:   88-block 93
    %%%%%:   88-block 94
    %%%%%:   88-block 95
    %%%%%:   88-block 96
    %%%%%:   88-block 97
    %%%%%:   88-block 98
    %%%%%:   88-block 99
    %%%%%:   88-block 100
    %%%%%:   88-block 101
    %%%%%:   88-block 102
    %%%%%:   88-block 103
    %%%%%:   88-block 104
    %%%%%:   88-block 105
    %%%%%:   88-block 106
    %%%%%:   88-block 107
    %%%%%:   88-block 108
    %%%%%:   88-block 109
    %%%%%:   88-block 110
    %%%%%:   88-block 111
    %%%%%:   88-block 112
    %%%%%:   88-block 113
    %%%%%:   88-block 114
    %%%%%:   88-block 115
    %%%%%:   88-block 116
    %%%%%:   88-block 117
    %%%%%:   88-block 118
    %%%%%:   88-block 119
    %%%%%:   88-block 120
    %%%%%:   88-block 121
    %%%%%:   88-block 122
    %%%%%:   88-block 123
    %%%%%:   88-block 124
    %%%%%:   88-block 125
    %%%%%:   88-block 126
    %%%%%:   88-block 127
    %%%%%:   88-block 128
    %%%%%:   88-block 129
    %%%%%:   88-block 130
    %%%%%:   88-block 131
    %%%%%:   88-block 132
    %%%%%:   88-block 133
    %%%%%:   88-block 134
    %%%%%:   88-block 135
    %%%%%:   88-block 136
    %%%%%:   88-block 137
    %%%%%:   88-block 138
    %%%%%:   88-block 139
    %%%%%:   88-block 140
    %%%%%:   88-block 141
    %%%%%:   88-block 142
    %%%%%:   88-block 143
    %%%%%:   88-block 144
    %%%%%:   88-block 145
    %%%%%:   88-block 146
    %%%%%:   88-block 147
    %%%%%:   88-block 148
    %%%%%:   88-block 149
    %%%%%:   88-block 150
    %%%%%:   88-block 151
    %%%%%:   88-block 152
    %%%%%:   88-block 153
    %%%%%:   88-block 154
    %%%%%:   88-block 155
    %%%%%:   88-block 156
    %%%%%:   88-block 157
    %%%%%:   88-block 158
    %%%%%:   88-block 159
    %%%%%:   88-block 160
    %%%%%:   88-block 161
    %%%%%:   88-block 162
    %%%%%:   88-block 163
    %%%%%:   88-block 164
    %%%%%:   88-block 165
    %%%%%:   88-block 166
    %%%%%:   88-block 167
    %%%%%:   88-block 168
    %%%%%:   88-block 169
    %%%%%:   88-block 170
    %%%%%:   88-block 171
    %%%%%:   88-block 172
       15:   88-block 173
    %%%%%:   88-block 174
       15:   88-block 175
       15:   88-block 176
    %%%%%:   88-block 177
    %%%%%:   88-block 178
    %%%%%:   88-block 179
    %%%%%:   88-block 180
    %%%%%:   88-block 181
    %%%%%:   88-block 182
    %%%%%:   88-block 183
    %%%%%:   88-block 184
    %%%%%:   88-block 185
    %%%%%:   88-block 186
    %%%%%:   88-block 187
    %%%%%:   88-block 188
    %%%%%:   88-block 189
    %%%%%:   88-block 190
    %%%%%:   88-block 191
    %%%%%:   88-block 192
    %%%%%:   88-block 193
    %%%%%:   88-block 194
        1:   88-block 195
    %%%%%:   88-block 196
    %%%%%:   88-block 197
    %%%%%:   88-block 198
    %%%%%:   88-block 199
    %%%%%:   88-block 200
        1:   88-block 201
    %%%%%:   88-block 202
        1:   88-block 203
    %%%%%:   88-block 204
    %%%%%:   88-block 205
    %%%%%:   88-block 206
        1:   88-block 207
    %%%%%:   88-block 208
    %%%%%:   88-block 209
    %%%%%:   88-block 210
        1:   88-block 211
    %%%%%:   88-block 212
    %%%%%:   88-block 213
    %%%%%:   88-block 214
    %%%%%:   88-block 215
    %%%%%:   88-block 216
    %%%%%:   88-block 217
    %%%%%:   88-block 218
    %%%%%:   88-block 219
    %%%%%:   88-block 220
    %%%%%:   88-block 221
    %%%%%:   88-block 222
    %%%%%:   88-block 223
    %%%%%:   88-block 224
        1:   88-block 225
        1:   88-block 226
        1:   88-block 227
    %%%%%:   88-block 228
    %%%%%:   88-block 229
    %%%%%:   88-block 230
    %%%%%:   88-block 231
        1:   88-block 232
        -:   89:
        -:   90:      __attribute__((__always_inline__))
        -:   91:      _GLIBCXX20_CONSTEXPR
      24*:   92:      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    %%%%%:   92-block  0
    %%%%%:   92-block  1
    %%%%%:   92-block  2
    %%%%%:   92-block  3
    %%%%%:   92-block  4
        3:   92-block  5
    %%%%%:   92-block  6
    %%%%%:   92-block  7
    %%%%%:   92-block  8
    %%%%%:   92-block  9
        2:   92-block 10
       16:   92-block 11
        -:   93:
        -:   94:      template<typename _Tp1>
        -:   95:	__attribute__((__always_inline__))
        -:   96:	_GLIBCXX20_CONSTEXPR
        -:   97:	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   98:
        -:   99:#if __cplusplus <= 201703L
      84*:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEED2Ev:
function _ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIcED2Ev:
function _ZNSt15__new_allocatorIcED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIwED2Ev:
function _ZNSt15__new_allocatorIwED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN7testing14TestPartResultEED2Ev:
function _ZNSt15__new_allocatorIN7testing14TestPartResultEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEED2Ev:
function _ZNSt15__new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev called 63 returned 100% blocks executed 100%
       63:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKPKN7testing8internal15ThreadLocalBaseESt10shared_ptrINS3_26ThreadLocalValueHolderBaseEEEEED2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKPKN7testing8internal15ThreadLocalBaseESt10shared_ptrINS3_26ThreadLocalValueHolderBaseEEEEED2Ev called 2 returned 100% blocks executed 100%
        2:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN7testing8internal26ThreadLocalValueHolderBaseEEED2Ev:
function _ZNSt15__new_allocatorISt10shared_ptrIN7testing8internal26ThreadLocalValueHolderBaseEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEED2Ev:
function _ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEED2Ev called 19 returned 100% blocks executed 100%
       19:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIdED2Ev:
function _ZNSt15__new_allocatorIdED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt6vectorIdSaIdEEED2Ev:
function _ZNSt15__new_allocatorISt6vectorIdSaIdEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEED2Ev:
function _ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN7testing8internal9TraceInfoEED2Ev:
function _ZNSt15__new_allocatorIN7testing8internal9TraceInfoEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIyED2Ev:
function _ZNSt15__new_allocatorIyED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEyEEED2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEyEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEED2Ev:
function _ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIN7testing12TestPropertyEED2Ev:
function _ZNSt15__new_allocatorIN7testing12TestPropertyEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing8TestInfoEED2Ev:
function _ZNSt15__new_allocatorIPN7testing8TestInfoEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIiED2Ev:
function _ZNSt15__new_allocatorIiED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing17TestEventListenerEED2Ev:
function _ZNSt15__new_allocatorIPN7testing17TestEventListenerEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing11EnvironmentEED2Ev:
function _ZNSt15__new_allocatorIPN7testing11EnvironmentEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPN7testing9TestSuiteEED2Ev:
function _ZNSt15__new_allocatorIPN7testing9TestSuiteEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEED2Ev:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEED2Ev:
function _ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEED2Ev called 0 returned 0% blocks executed 0%
    #####:  100:      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:  101:
        -:  102:      pointer
        -:  103:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:  104:      { return std::__addressof(__x); }
        -:  105:
        -:  106:      const_pointer
        -:  107:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:  108:      { return std::__addressof(__x); }
        -:  109:#endif
        -:  110:
        -:  111:#if __has_builtin(__builtin_operator_new) >= 201802L
        -:  112:# define _GLIBCXX_OPERATOR_NEW __builtin_operator_new
        -:  113:# define _GLIBCXX_OPERATOR_DELETE __builtin_operator_delete
        -:  114:#else
        -:  115:# define _GLIBCXX_OPERATOR_NEW ::operator new
        -:  116:# define _GLIBCXX_OPERATOR_DELETE ::operator delete
        -:  117:#endif
        -:  118:
        -:  119:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:  120:      // about what the return value is when __n == 0.
        -:  121:      _GLIBCXX_NODISCARD _Tp*
     101*:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
     101*:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    #####:  135:	      std::__throw_bad_array_new_length();
    #####:  136:	    std::__throw_bad_alloc();
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
     101*:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt6vectorIdSaIdEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt6vectorIdSaIdEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEyPKv called 56 returned 100% blocks executed 67%
       56:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
       56:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
       56:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 56
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
       56:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
       56:  147-block  0
call    0 returned 56
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN7testing8internal26ThreadLocalValueHolderBaseEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10shared_ptrIN7testing8internal26ThreadLocalValueHolderBaseEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN7testing14TestPartResultEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN7testing14TestPartResultEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN7testing12TestPropertyEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN7testing12TestPropertyEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIPN7testing8TestInfoEE8allocateEyPKv:
function _ZNSt15__new_allocatorIPN7testing8TestInfoEE8allocateEyPKv called 15 returned 100% blocks executed 67%
       15:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
       15:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
       15:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 15
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
       15:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
       15:  147-block  0
call    0 returned 15
        -:  148:      }
------------------
_ZNSt15__new_allocatorIPN7testing17TestEventListenerEE8allocateEyPKv:
function _ZNSt15__new_allocatorIPN7testing17TestEventListenerEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorIPN7testing11EnvironmentEE8allocateEyPKv:
function _ZNSt15__new_allocatorIPN7testing11EnvironmentEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIN7testing8internal9TraceInfoEE8allocateEyPKv:
function _ZNSt15__new_allocatorIN7testing8internal9TraceInfoEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIPN7testing9TestSuiteEE8allocateEyPKv:
function _ZNSt15__new_allocatorIPN7testing9TestSuiteEE8allocateEyPKv called 5 returned 100% blocks executed 67%
        5:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        5:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        5:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        5:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        5:  147-block  0
call    0 returned 5
        -:  148:      }
------------------
_ZNSt15__new_allocatorIdE8allocateEyPKv:
function _ZNSt15__new_allocatorIdE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEyPKv:
function _ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIyE8allocateEyPKv:
function _ZNSt15__new_allocatorIyE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorIiE8allocateEyPKv:
function _ZNSt15__new_allocatorIiE8allocateEyPKv called 20 returned 100% blocks executed 67%
       20:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
       20:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
       20:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 20
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
       20:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
       20:  147-block  0
call    0 returned 20
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKmSt3mapIPKN7testing8internal15ThreadLocalBaseESt10shared_ptrINS5_26ThreadLocalValueHolderBaseEESt4lessIS8_ESaIS1_IKS8_SB_EEEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKmSt3mapIPKN7testing8internal15ThreadLocalBaseESt10shared_ptrINS5_26ThreadLocalValueHolderBaseEESt4lessIS8_ESaIS1_IKS8_SB_EEEEEE8allocateEyPKv called 1 returned 100% blocks executed 67%
        1:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        1:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        1:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        1:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        1:  147-block  0
call    0 returned 1
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKPKN7testing8internal15ThreadLocalBaseESt10shared_ptrINS3_26ThreadLocalValueHolderBaseEEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKPKN7testing8internal15ThreadLocalBaseESt10shared_ptrINS3_26ThreadLocalValueHolderBaseEEEEE8allocateEyPKv called 2 returned 100% blocks executed 67%
        2:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
        2:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
        2:  130-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
        2:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
        2:  147-block  0
call    0 returned 2
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEyEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEyEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEyPKv:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEE8allocateEyPKv:
function _ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEE8allocateEyPKv called 0 returned 0% blocks executed 0%
    #####:  122:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  123:      {
        -:  124:#if __cplusplus >= 201103L
        -:  125:	// _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:	// 3308. std::allocator<void>().allocate(n)
        -:  127:	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
        -:  128:#endif
        -:  129:
    #####:  130:	if (__builtin_expect(__n > this->_M_max_size(), false))
    %%%%%:  130-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
        -:  131:	  {
        -:  132:	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  133:	    // 3190. allocator::allocate sometimes returns too little storage
    #####:  134:	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
    %%%%%:  134-block  0
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  135:	      std::__throw_bad_array_new_length();
    %%%%%:  135-block  0
call    0 never executed
    #####:  136:	    std::__throw_bad_alloc();
    %%%%%:  136-block  0
call    0 never executed
        -:  137:	  }
        -:  138:
        -:  139:#if __cpp_aligned_new
        -:  140:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  141:	  {
        -:  142:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  143:	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
        -:  144:							   __al));
        -:  145:	  }
        -:  146:#endif
    #####:  147:	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    %%%%%:  147-block  0
call    0 never executed
        -:  148:      }
------------------
        -:  149:
        -:  150:      // __p is not permitted to be a null pointer.
        -:  151:      void
      63*:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
      63*:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        -:  169:      }
------------------
_ZNSt15__new_allocatorIPN7testing9TestSuiteEE10deallocateEPS2_y:
function _ZNSt15__new_allocatorIPN7testing9TestSuiteEE10deallocateEPS2_y called 4 returned 100% blocks executed 100%
        4:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        4:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        4:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        4:  168-block  0
call    0 returned 4
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN7testing14TestPartResultEE10deallocateEPS1_y:
function _ZNSt15__new_allocatorIN7testing14TestPartResultEE10deallocateEPS1_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEE10deallocateEPS3_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_y:
function _ZNSt15__new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS5_y called 55 returned 100% blocks executed 100%
       55:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
       55:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
       55:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
       55:  168-block  0
call    0 returned 55
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10shared_ptrIN7testing8internal26ThreadLocalValueHolderBaseEEE10deallocateEPS4_y:
function _ZNSt15__new_allocatorISt10shared_ptrIN7testing8internal26ThreadLocalValueHolderBaseEEE10deallocateEPS4_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEE10deallocateEPS3_y:
function _ZNSt15__new_allocatorIN7testing8internal13edit_distance8EditTypeEE10deallocateEPS3_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIyE10deallocateEPyy:
function _ZNSt15__new_allocatorIyE10deallocateEPyy called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN7testing12TestPropertyEE10deallocateEPS1_y:
function _ZNSt15__new_allocatorIN7testing12TestPropertyEE10deallocateEPS1_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIPN7testing8TestInfoEE10deallocateEPS2_y:
function _ZNSt15__new_allocatorIPN7testing8TestInfoEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIiE10deallocateEPiy:
function _ZNSt15__new_allocatorIiE10deallocateEPiy called 4 returned 100% blocks executed 100%
        4:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
        4:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
        4:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
        4:  168-block  0
call    0 returned 4
        -:  169:      }
------------------
_ZNSt15__new_allocatorIPN7testing17TestEventListenerEE10deallocateEPS2_y:
function _ZNSt15__new_allocatorIPN7testing17TestEventListenerEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIPN7testing11EnvironmentEE10deallocateEPS2_y:
function _ZNSt15__new_allocatorIPN7testing11EnvironmentEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEE10deallocateEPS8_y:
function _ZNSt15__new_allocatorINSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEE10deallocateEPS8_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIdE10deallocateEPdy:
function _ZNSt15__new_allocatorIdE10deallocateEPdy called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt6vectorIdSaIdEEE10deallocateEPS2_y:
function _ZNSt15__new_allocatorISt6vectorIdSaIdEEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEE10deallocateEPS6_y:
function _ZNSt15__new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS4_EEE10deallocateEPS6_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEE10deallocateEPS5_y:
function _ZNSt15__new_allocatorISt10_List_nodeISt4pairIcPKcEEE10deallocateEPS5_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIN7testing8internal9TraceInfoEE10deallocateEPS2_y:
function _ZNSt15__new_allocatorIN7testing8internal9TraceInfoEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKPKN7testing8internal15ThreadLocalBaseESt10shared_ptrINS3_26ThreadLocalValueHolderBaseEEEEE10deallocateEPSC_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKPKN7testing8internal15ThreadLocalBaseESt10shared_ptrINS3_26ThreadLocalValueHolderBaseEEEEE10deallocateEPSC_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKmSt3mapIPKN7testing8internal15ThreadLocalBaseESt10shared_ptrINS5_26ThreadLocalValueHolderBaseEESt4lessIS8_ESaIS1_IKS8_SB_EEEEEE10deallocateEPSJ_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKmSt3mapIPKN7testing8internal15ThreadLocalBaseESt10shared_ptrINS5_26ThreadLocalValueHolderBaseEESt4lessIS8_ESaIS1_IKS8_SB_EEEEEE10deallocateEPSJ_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS7_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS7_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_y:
function _ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEyEEE10deallocateEPSA_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEyEEE10deallocateEPSA_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
_ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE10deallocateEPSE_y:
function _ZNSt15__new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE10deallocateEPSE_y called 0 returned 0% blocks executed 0%
    #####:  152:      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
    %%%%%:  152-block  0
        -:  153:      {
        -:  154:#if __cpp_sized_deallocation
        -:  155:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
        -:  156:#else
        -:  157:# define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
        -:  158:#endif
        -:  159:
        -:  160:#if __cpp_aligned_new
        -:  161:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  162:	  {
        -:  163:	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
        -:  164:				     std::align_val_t(alignof(_Tp)));
        -:  165:	    return;
        -:  166:	  }
        -:  167:#endif
    #####:  168:	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    %%%%%:  168-block  0
call    0 never executed
        -:  169:      }
------------------
        -:  170:
        -:  171:#undef _GLIBCXX_SIZED_DEALLOC
        -:  172:#undef _GLIBCXX_OPERATOR_DELETE
        -:  173:#undef _GLIBCXX_OPERATOR_NEW
        -:  174:
        -:  175:#if __cplusplus <= 201703L
        -:  176:      __attribute__((__always_inline__))
        -:  177:      size_type
        -:  178:      max_size() const _GLIBCXX_USE_NOEXCEPT
     177*:  179:      { return _M_max_size(); }
       40:  179-block  0
       40:  179-block  1
    %%%%%:  179-block  2
    %%%%%:  179-block  3
       10:  179-block  4
       10:  179-block  5
    %%%%%:  179-block  6
    %%%%%:  179-block  7
    %%%%%:  179-block  8
    %%%%%:  179-block  9
        2:  179-block 10
        2:  179-block 11
       30:  179-block 12
       30:  179-block 13
    %%%%%:  179-block 14
    %%%%%:  179-block 15
        2:  179-block 16
        2:  179-block 17
    %%%%%:  179-block 18
    %%%%%:  179-block 19
    %%%%%:  179-block 20
    %%%%%:  179-block 21
    %%%%%:  179-block 22
    %%%%%:  179-block 23
    %%%%%:  179-block 24
    %%%%%:  179-block 25
    %%%%%:  179-block 26
    %%%%%:  179-block 27
       93:  179-block 28
       93:  179-block 29
        -:  180:
        -:  181:#if __cplusplus >= 201103L
        -:  182:      template<typename _Up, typename... _Args>
        -:  183:	__attribute__((__always_inline__))
        -:  184:	void
        -:  185:	construct(_Up* __p, _Args&&... __args)
        -:  186:	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
     153*:  187:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 returned 33
call    7 returned 33
call    8 returned 33
call    9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
call   15 never executed
call   16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
branch 21 never executed (fallthrough)
branch 22 never executed (throw)
    %%%%%:  187-block  0
    $$$$$:  187-block  1
branch 23 never executed (fallthrough)
branch 24 never executed
    $$$$$:  187-block  2
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
call   32 never executed
call   33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
branch 38 never executed (fallthrough)
branch 39 never executed (throw)
    %%%%%:  187-block  3
    $$$$$:  187-block  4
    $$$$$:  187-block  5
branch 40 never executed (fallthrough)
branch 41 never executed
    $$$$$:  187-block  6
call   42 never executed
call   43 returned 17
call   44 returned 17
call   45 returned 17
call   46 never executed
call   47 never executed
call   48 never executed
call   49 never executed
call   50 returned 2
call   51 returned 2
call   52 returned 2
call   53 returned 1
call   54 returned 1
call   55 returned 1
call   56 returned 20
call   57 returned 20
call   58 never executed
call   59 never executed
call   60 never executed
call   61 never executed
call   62 returned 38
call   63 returned 38
call   64 returned 38
call   65 returned 5
call   66 returned 5
call   67 never executed
call   68 never executed
call   69 never executed
call   70 never executed
call   71 never executed
call   72 never executed
call   73 never executed
branch 74 never executed (fallthrough)
branch 75 never executed (throw)
    %%%%%:  187-block  7
    $$$$$:  187-block  8
branch 76 never executed (fallthrough)
branch 77 never executed
    $$$$$:  187-block  9
call   78 never executed
call   79 never executed
call   80 never executed
call   81 returned 1
call   82 returned 1
call   83 returned 10
call   84 returned 10
call   85 returned 15
call   86 returned 15
call   87 never executed
call   88 never executed
call   89 never executed
branch 90 never executed (fallthrough)
branch 91 never executed (throw)
    %%%%%:  187-block 10
    $$$$$:  187-block 11
branch 92 never executed (fallthrough)
branch 93 never executed
    $$$$$:  187-block 12
call   94 never executed
call   95 never executed
call   96 never executed
call   97 never executed
call   98 never executed
call   99 never executed
call   100 never executed
call   101 never executed
call   102 returned 1
call   103 returned 1
call   104 returned 1
branch 105 taken 1 (fallthrough)
branch 106 taken 0 (throw)
        1:  187-block 13
    $$$$$:  187-block 14
branch 107 never executed (fallthrough)
branch 108 never executed
    $$$$$:  187-block 15
call   109 never executed
call   110 never executed
call   111 never executed
call   112 never executed
call   113 returned 10
call   114 returned 10
call   115 never executed
call   116 never executed
call   117 never executed
call   118 never executed
call   119 never executed
branch 120 never executed (fallthrough)
branch 121 never executed (throw)
    %%%%%:  187-block 16
    $$$$$:  187-block 17
branch 122 never executed (fallthrough)
branch 123 never executed
    $$$$$:  187-block 18
call   124 never executed
call   125 never executed
call   126 never executed
call   127 never executed
call   128 never executed
call   129 never executed
call   130 never executed
call   131 never executed
call   132 never executed
call   133 never executed
branch 134 never executed (fallthrough)
branch 135 never executed (throw)
    %%%%%:  187-block 19
    $$$$$:  187-block 20
branch 136 never executed (fallthrough)
branch 137 never executed
    $$$$$:  187-block 21
call   138 never executed
call   139 never executed
call   140 never executed
call   141 never executed
call   142 never executed
call   143 never executed
branch 144 never executed (fallthrough)
branch 145 never executed (throw)
    %%%%%:  187-block 22
    $$$$$:  187-block 23
branch 146 never executed (fallthrough)
branch 147 never executed
    $$$$$:  187-block 24
call   148 never executed
call   149 never executed
call   150 never executed
call   151 never executed
        -:  188:
        -:  189:      template<typename _Up>
        -:  190:	__attribute__((__always_inline__))
        -:  191:	void
        -:  192:	destroy(_Up* __p)
        -:  193:	noexcept(std::is_nothrow_destructible<_Up>::value)
      17*:  194:	{ __p->~_Up(); }
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 returned 17
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
    $$$$$:  194-block  0
call   11 never executed
    %%%%%:  194-block  1
    $$$$$:  194-block  2
call   12 never executed
    $$$$$:  194-block  3
call   13 never executed
    %%%%%:  194-block  4
call   14 never executed
        -:  195:#else
        -:  196:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  197:      // 402. wrong new expression in [some_] allocator::construct
        -:  198:      __attribute__((__always_inline__))
        -:  199:      void
        -:  200:      construct(pointer __p, const _Tp& __val)
        -:  201:      { ::new((void *)__p) _Tp(__val); }
        -:  202:
        -:  203:      __attribute__((__always_inline__))
        -:  204:      void
        -:  205:      destroy(pointer __p) { __p->~_Tp(); }
        -:  206:#endif
        -:  207:#endif // ! C++20
        -:  208:
        -:  209:      template<typename _Up>
        -:  210:	friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR bool
        -:  211:	operator==(const __new_allocator&, const __new_allocator<_Up>&)
        -:  212:	_GLIBCXX_NOTHROW
        -:  213:	{ return true; }
        -:  214:
        -:  215:#if __cpp_impl_three_way_comparison < 201907L
        -:  216:      template<typename _Up>
        -:  217:	friend __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR bool
        -:  218:	operator!=(const __new_allocator&, const __new_allocator<_Up>&)
        -:  219:	_GLIBCXX_NOTHROW
        -:  220:	{ return false; }
        -:  221:#endif
        -:  222:
        -:  223:    private:
        -:  224:      __attribute__((__always_inline__))
        -:  225:      _GLIBCXX_CONSTEXPR size_type
        -:  226:      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
        -:  227:      {
        -:  228:#if __PTRDIFF_MAX__ < __SIZE_MAX__
     278*:  229:	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
    %%%%%:  229-block  0
    %%%%%:  229-block  1
    %%%%%:  229-block  2
    %%%%%:  229-block  3
    %%%%%:  229-block  4
        2:  229-block  5
        1:  229-block  6
       20:  229-block  7
       40:  229-block  8
    %%%%%:  229-block  9
    %%%%%:  229-block 10
    %%%%%:  229-block 11
    %%%%%:  229-block 12
    %%%%%:  229-block 13
    %%%%%:  229-block 14
        5:  229-block 15
       10:  229-block 16
    %%%%%:  229-block 17
    %%%%%:  229-block 18
    %%%%%:  229-block 19
    %%%%%:  229-block 20
        1:  229-block 21
        2:  229-block 22
       15:  229-block 23
       30:  229-block 24
    %%%%%:  229-block 25
    %%%%%:  229-block 26
    %%%%%:  229-block 27
        1:  229-block 28
        2:  229-block 29
    %%%%%:  229-block 30
    %%%%%:  229-block 31
       56:  229-block 32
    %%%%%:  229-block 33
    %%%%%:  229-block 34
    %%%%%:  229-block 35
    %%%%%:  229-block 36
       93:  229-block 37
        -:  230:#else
        -:  231:	return std::size_t(-1) / sizeof(_Tp);
        -:  232:#endif
        -:  233:      }
        -:  234:    };
        -:  235:
        -:  236:_GLIBCXX_END_NAMESPACE_VERSION
        -:  237:} // namespace
        -:  238:
        -:  239:#endif
